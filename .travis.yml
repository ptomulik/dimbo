language: cpp
compiler:
  - gcc
  - clang
before_install:
  - lsb_release -c
  - lsb_release -r
  - sudo apt-add-repository 'deb http://archive.ubuntu.com/ubuntu quantal main universe multiverse restricted'
  - sudo apt-add-repository 'deb http://archive.ubuntu.com/ubuntu raring main universe multiverse restricted'
  - sudo apt-add-repository 'deb http://archive.ubuntu.com/ubuntu saucy main universe multiverse restricted'
  - sudo apt-add-repository 'deb http://archive.ubuntu.com/ubuntu trusty main universe multiverse restricted'
  - sudo apt-get -y update
install:
  - sudo apt-get --no-install-recommends -y install g++
  - sudo apt-get --no-install-recommends -y install clang
  - if (clang --version | grep 'clang version 3\.3'); then
      sudo apt-get --no-install-recommends -y install libclang-common-3.3-dev;
    fi
  - sudo apt-get --no-install-recommends -y install cxxtest
  - sudo apt-get --no-install-recommends -y install scons
  - sudo apt-get --no-install-recommends -y install swig
  - sudo apt-get --no-install-recommends -y install nvidia-opencl-dev
  - sudo apt-get --no-install-recommends -y install libboost-dev libboost-program-options-dev libboost-serialization-dev libboost-regex-dev
  - sudo apt-get --no-install-recommends -y install libprotobuf-dev protobuf-compiler
    # Remove the loop below once https://github.com/eddyxu/cpp-coveralls/pull/52
    # gets merged.
  - sudo pip install cpp-coveralls;
    for F in $(find /usr/local/lib/ -name 'coverage.py'); do
      echo "Patching $F";
      sudo curl https://raw.githubusercontent.com/eddyxu/cpp-coveralls/master/cpp_coveralls/coverage.py -o $F;
      sudo rm "${F}c";
      sudo python -c 'import coveralls.coverage';
    done

before_script:
  - $CXX --version
  - $CXX -dumpversion
script:
  - scons check DIMBO_ENABLE_GCOV=YES 
after_success:
    GCOV=gcov-`$CXX -dumpversion | sed -e 's/^\([0-9]\+\.[0-9]\+\).*$/\1/'`;
    which $GCOV || GCOV="";
    echo $GCOV;
    if [ ! -z "$GCOV" ]; then
      coveralls --gcov $GCOV -b . -r . -e .git -e HOWTO -e lib -e bin 
                  -e src/app -e build/app -e build/.sconf_temp 
                  -e build/lib/dimbo/.sconf_temp
                  -e src/lib/dimbo/cl/cl_errors -e src/lib/dimbo/cl/exceptions
                  -e src/lib/dimbo/doc -e src/lib/dimbo/test
                  -e site_scons -e template -e valgrind -e /usr;
    fi
after_failure:
  - test -f src/config.log && cat src/config.log
  - test -f src/lib/dimbo/config.log && cat src/lib/dimbo/config.log
