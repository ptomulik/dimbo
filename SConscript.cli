# @COPYRIGHT@
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE

from SCons.Util import CLVar
from SConsGnuBuild.GVars import GVarDeclsU
from SConsGnuBuild import GDirVars

Import(['env'])

# CLI variables (we store them in .scons_variables')
variables = Variables('.scons_variables')

##############################################################################
# Declaring GVar variables for the project
##############################################################################
env['GVAR_DECLARATIONS'] = GVarDeclsU(
    CCFLAGS  = { 'env_key' : 'GNUBLD_CCFLAGS' 
               , 'var_key' : 'CCFLAGS'
               , 'default' : env.get('CCFLAGS', CLVar())
               , 'converter' : CLVar 
               , 'help' : 'Compilation flags used by C and C++ compilers.' },
    CFLAGS   = { 'env_key' : 'GNUBLD_CFLAGS' 
               , 'var_key' : 'CFLAGS'
               , 'default' : env.get('CFLAGS', CLVar())
               , 'converter' : CLVar 
               , 'help' : 'Additional compilation flags for C compiler.' },
    CXXFLAGS = { 'env_key' : 'GNUBLD_CXXFLAGS' 
               , 'var_key' : 'CXXFLAGS'
               , 'default' : env.get('CXXFLAGS', CLVar())
               , 'converter' : CLVar
               , 'help' : 'Additional compilation flags for C++ compiler.' }
)
env['GVAR_DECLARATIONS'].update(GDirVars.DeclareGVars())
##############################################################################

SConscript('src/SConscript.cli', exports = ['env'])

##############################################################################
# Commit GVar declarations, update environment with their values and save them
# to .scons_variables file.
##############################################################################
gvars = env['GVAR_DECLARATIONS'].Commit(env, variables, True)
gvars.UpdateEnvironment(env, variables, True)
gvars.SaveVariables(variables, '.scons_variables', env)

##############################################################################
# Additional --help-variables option to list available CLI variables.
##############################################################################
AddOption( '--help-variables', dest='help_variables', action='store_true',
           help='print help for CLI variables' )
if GetOption('help_variables'):
    print gvars.GenerateVariablesHelpText(variables, env)
    Exit(0)
##############################################################################

# Local Variables:
# # tab-width:4
# # indent-tabs-mode:nil
# # End:
# vim: set syntax=scons expandtab tabstop=4 shiftwidth=4:
