# @COPYRIGHT@
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE

import os
from SCons.Util import CLVar
from SConsGnu import GVars, AcDirVars, CcVars
from SConsGnu.GVars import GVarDeclsU

Import(['env'])

##############################################################################
def munge_os_environ(ose):
    """Apply appropriate converters to variables from OS environment"""
    clvars = CcVars.GVarNames(categories = 'flags')
    res = ose.copy()
    for fv in clvars:
        try:
            res[fv] = CLVar(ose[fv])
        except KeyError:
            pass
    return res
##############################################################################

variables = Variables('.scons.variables')

##############################################################################
# Declare local CLI variables
##############################################################################
decls = GVarDeclsU(
    DIMBO_ENABLE_GCOV = {
        'env_key' : 'DIMBO_ENABLE_GCOV',
        'var_key' : 'DIMBO_ENABLE_GCOV',
        'help' : 'Compile with GCOV support',
        'default' : 'no'
    }
)
##############################################################################
# Declare some standard CLI variables
##############################################################################
decls.update(CcVars.DeclareGVars(defaults = env))
decls.update(AcDirVars.DeclareGVars(defaults = env))
##############################################################################


# Let anyone else downwards to inject its CLI options and variables.
##SConscript('xyz/SConscript.cli', exports = ['env', 'decls'])

##############################################################################
# Incorporate GVars into environment
##############################################################################
gvars = decls.Commit(env, variables, True)
osenv = munge_os_environ(os.environ)
# FIXME: in fact, variables should be saved only on demand ('configure' target)
#        so by default filename should be None
gvars.Postprocess(env, variables, True, osenv, filename='.scons.variables')
env['GVARS'] = gvars.EnvProxy(env) # so we can do env['GVARS']['XYZ'].
##############################################################################

##############################################################################
# Additional --help-variables option to list available CLI variables.
##############################################################################
AddOption( '--help-variables', dest='help_variables', action='store_true',
           help='print help for CLI variables' )
if GetOption('help_variables'):
    print gvars.GenerateVariablesHelpText(variables, env, True)
    Exit(0)
##############################################################################

# Local Variables:
# # tab-width:4
# # indent-tabs-mode:nil
# # End:
# vim: set syntax=scons expandtab tabstop=4 shiftwidth=4:
