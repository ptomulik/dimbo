# @COPYRIGHT@
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE

Import('env')

from distutils import sysconfig
import re

cpppath = [
    '#%s' % env.Dir('.').path
]
env.Append( CPPPATH = cpppath )

##env.Append(SWIGPATH = [ '#%s' % env.Dir('.').path ])
env.Append(PROTOCPROTOPATH = [ env.Dir('.').srcnode().path ])
env.Append(PROTOCPROTOPATH = [ env.Dir('.').path ])

################################ SWIG #######################################
swigflags = [
    '-c++'
]

swigpath = [
    '#%s' % env.Dir('.').path,
    '#%s' % env.Dir('dimbo/swig').path,
    '/usr/include'
]

# Swig in general
env.Append( SWIGFLAGS = swigflags )
env.Append( SWIGPATH = swigpath )
env.Append( SWIGPATH = [ '/usr/include' ] )


################################ SWIGPY #####################################
swigpy_swigpath = [
    '.',
    '#%s' % env.Dir('dimbo/python').path,
    '#%s' % env.Dir('dimbo/swig/python').path,
] + swigpath

swigpy_swigflags = [
] + swigflags

swigpy_cpppath = [
    '#%s' % env.Dir('.').path,
    '#%s' % env.Dir('dimbo/swig').path,
    sysconfig.get_python_inc()
]

# Swig 2.x and older (may) need these flags
swigpy_cflags = env.get('CFLAGS',[])
swigpy_cxxflags = env.get('CXXFLAGS',[])
if re.match(r'gcc$',env.get('CC')):
    swigpy_cflags += [
        '-Wno-maybe-uninitialized', # FIXME: introduced in gcc 4.8
        '-Wno-unused-parameter',
        '-Wno-deprecated-declarations'
    ]
if re.match(r'g\+\+$',env.get('CXX')):
    swigpy_cxxflags += [
        '-Wno-maybe-uninitialized', # FIXME: introduced in gcc 4.8
        '-Wno-unused-parameter',
        '-Wno-deprecated-declarations'
    ]
if not re.match(r'^[3-9]\.', env.subst('$SWIGVERSION')):
    if re.match(r'clang$',env.get('CC')):
        swigpy_cflags += [ '-Wno-sometimes-uninitialized',
                           '-Wno-c++11-narrowing' ]
        if env.get('CC_WNO_DEPRECATED_REGISTER'):
            swigpy_cflags += [ '-Wno-deprecated-register' ]
        else:
            swigpy_cflags += [ '-Wno-deprecated' ]

    if re.match(r'clang\+\+$',env.get('CXX')):
        swigpy_cxxflags += [ '-Wno-sometimes-uninitialized',
                             '-Wno-c++11-narrowing' ]
        if env.get('CXX_WNO_DEPRECATED_REGISTER'):
            swigpy_cxxflags += [ '-Wno-deprecated-register' ]
        else:
            swigpy_cxxflags += [ '-Wno-deprecated' ]

swigpy_libpath = [
    '$LIBPATH'
]



# Swig for python bindings
env.Append( SWIGPY_SWIGPATH = swigpy_swigpath )
env.Append( SWIGPY_SWIGPATH = [ '/usr/include' ])
env.Append( SWIGPY_SWIGFLAGS = swigpy_swigflags )
env.Append( SWIGPY_CPPPATH = swigpy_cpppath )
env.Append( SWIGPY_CFLAGS = swigpy_cflags )
env.Append( SWIGPY_CXXFLAGS = swigpy_cxxflags )
env.Append( SWIGPY_LIBPATH = swigpy_libpath )


############################################################################

# Recursion
subdirs = [ 'dimbo' ]
scripts = [ '%s/SConscript' % s for s in subdirs ]
SConscript( scripts, exports = ['env'] )

# Local Variables:
# # tab-width:4
# # indent-tabs-mode:nil
# # End:
# vim: set syntax=scons expandtab tabstop=4 shiftwidth=4:
