#
# @COPYRIGHT@
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE

Import(['conf'])

import sys

def CheckClHVersion(ctx, ver):
    ctx.Message('Checking for OpenCL %s support in CL/cl.h ...' % ver)
    prog = """
    #include <CL/cl.h>
    int main(int argc, char* argv[]) {
        (void)argc; /* prevent "unused argument argc" warning */
        (void)argv; /* prevent "unused argument argv" warning */
    #if CL_VERSION_%s_%s
        return 0;
    #else
        return 1;
    #endif
    }
    """ % tuple(ver.split('.'))
    success, outstr = ctx.TryRun(prog,'.c')
    ctx.Result(success)
    return success

conf.AddTests({ 'CheckClHVersion' : CheckClHVersion })

if conf.CheckClHVersion('1.0'):
    conf.Define( 'HAVE_OPENCL_CL_H_VERSION_1_0', 1, 'CL/cl.h supports OpenCL 1.0')
if conf.CheckClHVersion('1.1'):
    conf.Define( 'HAVE_OPENCL_CL_H_VERSION_1_1', 1, 'CL/cl.h supports OpenCL 1.1')
if conf.CheckClHVersion('1.2'):
    conf.Define( 'HAVE_OPENCL_CL_H_VERSION_1_2', 1, 'CL/cl.h supports OpenCL 1.2')
if conf.CheckClHVersion('2.0'):
    conf.Define( 'HAVE_OPENCL_CL_H_VERSION_2_0', 1, 'CL/cl.h supports OpenCL 2.0')


# FIXME: for MAC the header is OpenCL/cl.h
conf.req_headers.append(('CL/cl.h','<>','C'))
conf.req_libs.append({ 'library' : ['OpenCL'],
                       'autoadd' : 0,
                       'header'  : '#include <CL/cl.h>' })

# Local Variables:
# # tab-width:4
# # indent-tabs-mode:nil
# # End:
# vim: set syntax=scons expandtab tabstop=4 shiftwidth=4:
