# @COPYRIGHT@
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE

Import(['conf'])

########################### Local Config checks ##############################
import sys
import SCons.Util

conf.Define( 'ENABLE_NLS', 1, 'Enable Native Language Support' )

if sys.maxsize > 2**32:
    conf.Define( 'DIMBO_ARCH_64BIT' )

conf.req_headers = []
conf.req_libs = []

########################### Nest into subdirs  ###############################
subdirs = [ 'app', 'doc', 'cl', 'format', 'swig', 'protobuf', 'python', 'test' ]
scripts = [ '%s/SConscript.conf' % s for s in subdirs ]
SConscript( scripts, exports = ['conf'] )

########################### Final steps ######################################
def _arg2str(arg):
    if SCons.Util.is_Sequence(arg): return ' or '.join(arg)
    else: return str(arg)

conf.req_headers += [
    ('libintl.h', '<>', 'C'),
    ('boost/archive/xml_iarchive.hpp', '<>', 'C++'),
    ('boost/archive/xml_oarchive.hpp', '<>', 'C++'),
    ('boost/config.hpp', '<>', 'C++'),
    ('boost/current_function.hpp', '<>', 'C++'),
    ('boost/none.hpp', '<>', 'C++'),
    ('boost/optional.hpp', '<>', 'C++'),
    ('boost/program_options/options_description.hpp', '<>', 'C++'),
    ('boost/program_options/parsers.hpp', '<>', 'C++'),
    ('boost/program_options/value_semantic.hpp', '<>', 'C++'),
    ('boost/program_options/variables_map.hpp', '<>', 'C++'),
    ('boost/serialization/access.hpp', '<>', 'C++'),
    ('boost/serialization/collection_traits.hpp', '<>', 'C++'),
##    ('boost/serialization/collections_load_imp.hpp', '<>', 'C++'),
    ('boost/serialization/collections_save_imp.hpp', '<>', 'C++'),
    ('boost/serialization/nvp.hpp', '<>', 'C++'),
    ('boost/serialization/split_free.hpp', '<>', 'C++'),
    ('boost/serialization/utility.hpp', '<>', 'C++'),
    ('boost/serialization/version.hpp', '<>', 'C++'),
    ('boost/shared_array.hpp', '<>', 'C++'),
    ('boost/shared_ptr.hpp', '<>', 'C++'),
    ('boost/unordered_map.hpp', '<>', 'C++'),
    ('boost/unordered_set.hpp', '<>', 'C++'),
    ('algorithm', '<>', 'C++'),
    ('cstdlib', '<>', 'C++'),
    ('cstring', '<>', 'C++'),
    ('exception', '<>', 'C++'),
    ('iosfwd', '<>', 'C++'),
    ('iostream', '<>', 'C++'),
    ('iterator', '<>', 'C++'),
    ('list', '<>', 'C++'),
    ('map', '<>', 'C++'),
    ('new', '<>', 'C++'),
    ('ostream', '<>', 'C++'),
    ('set', '<>', 'C++'),
    ('sstream', '<>', 'C++'),
    ('stdexcept', '<>', 'C++'),
    ('string', '<>', 'C++'),
    ('vector', '<>', 'C++')
]

missing_headers = []
missing_libs = []
err = 0

for hdr in conf.req_headers:
    if SCons.Util.is_Dict(hdr):
        if not conf.CheckHeader(**hdr):
            missing_headers.append(_arg2str(hdr['header']))
    elif SCons.Util.is_Tuple(hdr):
        if not conf.CheckHeader(*hdr):
            missing_headers.append(_arg2str(hdr[0]))
    else:
        if not conf.CheckHeader(hdr):
            missing_headers.append(_arg2str(hdr))

for lib in conf.req_libs:
    if SCons.Util.is_Dict(lib):
        if not conf.CheckLib(**lib):
            missing_libs.append(_arg2str(lib['library']))
    elif SCons.Util.is_Tuple(lib):
        if not conf.CheckLib(*lib):
            missing_libs.append(_arg2str(lib[0]))
    else:
        if not conf.CheckLib(lib):
            missing_libs.append(_arg2str(lib))

if missing_headers:
    sys.stderr.write('Some required headers are missing or unusable '
                     '(see config.log):\n')
    sys.stderr.write('  %s\n' % '\n  '.join(missing_headers))
    err = 1

if missing_libs:
    sys.stderr.write('Some required libraries are missing are unusable '
                     '(see config.log):\n')
    sys.stderr.write('  %s\n' % '\n  '.join(missing_libs))
    err = 1

if err:
    sys.stderr.write('** configure failed **\n')
    Exit(err)

# Local Variables:
# # tab-width:4
# # indent-tabs-mode:nil
# # End:
# vim: set syntax=scons expandtab tabstop=4 shiftwidth=4:
